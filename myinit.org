#+STARTIP: overview
* Setup
** Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://melpa.org/packages/"))
  (setq package-enable-at-startup nil)
#+END_SRC
** Use-Package
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  ;(setq package-check-signature nil)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
** Auto Update / Always Ensure
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
* Preferences
** tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (global-visual-line-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq ring-bell-function 'ignore)
#+END_SRC
** Centralice Backup Files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5)   ; and how many of the old
#+END_SRC
* Interface
** Basics
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (blink-cursor-mode 0)
  ;(set-cursor-color "#3AC98B")
#+END_SRC
** Key Chords
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :config
    (key-chord-mode 1))
#+END_SRC
** Crux
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :chords ("DD" . crux-duplicate-current-line-or-region)
    :bind (("C-a" . crux-move-beginning-of-line)
	   ("C-c f" . crux-recentf-find-file)
	   ("C-c D" . crux-delete-file-and-buffer)
	   ("C-c r" . crux-rename-file-and-buffer)
	   ("C-c t" . crux-visit-term-buffer)
	   ("C-c S" . crux-find-shell-init-file)
	   ("C-<backspace>" . crux-kill-line-backwards)))
#+END_SRC
** Command completion
*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-bufferfs t)
    (setq ivy-initial-inputs-alist nil))
#+END_SRC
*** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))
#+END_SRC
*** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config
    (progn
      (ivy-mode 1)
      (setq enable-recursive-minibuffers t)
      (global-set-key (kbd "C-s") 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      ;(global-set-key (kbd "C-c g") 'counsel-git)
      ;(global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC
*** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra)
#+END_SRC
** Suggest next key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :config (which-key-mode))
  #+END_SRC
** Navigation
*** Ace windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :chords ("JK" . ace-window)
    :config
      (setq aw-scope 'frame)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :chords (("JJ" . avy-goto-char-2)
             ("JK" . avy-goto-char-timer)
             ("JL" . avy-goto-line)))
#+END_SRC
*** ag / Wgrep / Silversearcher
#+BEGIN_SRC emacs-lisp
  (use-package ag)
  (use-package wgrep)
  (use-package wgrep-ag)
  (require 'wgrep-ag)
#+END_SRC
*** Undo Tree
#+BEGIN_SRC emacs-lisp
  ;(use-package undo-tree
    ;:init
    ;(global-undo-tree-mode))
#+END_SRC
** Easier selection
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :bind ("C-+" . er/expand-region)
       :config
       (pending-delete-mode t))
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC
* Org mode
** General settings
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented 'f)
  (setq org-directory "~/org")
  ;(setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  ;(define-key global-map "\C-cc" 'org-capture)
  ;(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Apperance
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Misc packages
** Ido
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (setq ido-create-new-buffer 'always)
     (ido-mode 1)
   #+END_SRC
** IBuffer
#+BEGIN_SRC emacs-lisp
  ;;(defalias 'list-buffers 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
    (quote (("default"
    ("dired" (mode . dired-mode))
    ("org" (name . "^.*org$"))
    ("web" (or (mode . web-mode) (mode . js2-mode)))
    ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
    ("mu4e" (name . "\*mu4e\*"))
    ("programming" (or
        (mode . python-mode)
	(mode . c++-mode)))
    ("emacs" (or
      (name . "^\\*scratch\\*$")
      (name . "^\\*Messages\\*$")))))))
  (add-hook 'ibuffer-mode-hook
    (lambda ()
      (ibuffer-auto-mode 1)
      (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC

** Iedit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit)
   #+END_SRC
** Iedit-dwim
   #+BEGIN_SRC emacs-lisp
     (defun iedit-dwim (arg)
     ;; "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
     (interactive "P")
     (if arg
       (iedit-mode)
     (save-excursion
       (save-restriction
         (widen)
         ;; this function determines the scope of `iedit-start'.
         (if iedit-mode
           (iedit-done)
           ;; `current-word' can of course be replaced by other
           ;; functions.
           (narrow-to-defun)
           (iedit-start (current-word) (point-min) (point-max)))))))

     (global-set-key (kbd "C-`") 'iedit-dwim)
   #+END_SRC
** Beacon?
   #+BEGIN_SRC emacs-lisp
     ;(use-package beacon
       ;:config
       ;(beacon-mode 1)
       ;(setq beacon-color "#3AC98B"))
   #+END_SRC
** smex? amx? flx? wgrep?
#+BEGIN_SRC emacs-lisp
  ; packages that automatically integrates with ivy
  ;(use-package smex)
  ;(use-package amx)
  ;(use-package flx)
  ;(use-package wgrep)
#+END_SRC
** try
#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC
** Personal functions
#+BEGIN_SRC emacs-lisp
  (defun find-config ()
    "Edit myinit.org"
    (interactive)
    (find-file "~/.emacs.d/myinit.org"))
  (global-set-key (kbd "C-c I") 'find-config)

  (defun smart-kill-word ()
    "Kills the entire word your cursor is in."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (key-chord-define-global "WW" 'smart-kill-word)

  (defun jc/switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
  (key-chord-define-global "BB" 'jc/switch-to-previous-buffer)
#+END_SRC
** Narrow-Or-Widen-dwim???
#+BEGIN_SRC emacs-lisp
  ;(defun narrow-or-widen-dwim (p)
  ;Widen if buffer is narrowed, narrow-dwim otherwise.
  ;Dwim means: region, org-src-block, org-subtree, or
  ;defun, whichever applies first. Narrowing to
  ;org-src-block actually calls 'org-edit-src-code'.
  ;With prefix P, don't widen, just narrow even if buffer
  ;is already narrowed.
    ;(interactive "P")
    ;(declare (interactive-only))
    ;(cond ((and (buffer-narrowed-p) (not p)) (widen))
	  ;((region-active-p)
	   ;(narrow-to-region (region-beginning)
			     ;(region-end)))
	  ;((derived-mode-p 'org-mode)
	   ;; 'org-edit-src-code' is not a real narrowing
	   ;; command. Remove this first conditional if
	   ;; you don't want it.
	   ;(cond ((ignore-errors (org-edit-src-code) t)
		  ;(delete-other-windows))
		 ;((ignore-errors (org-narrow-to-block) t))
		 ;(t (org-narrow-to-subtree))))
	  ;((derived-mode-p 'latex-mode)
	   ;(LaTeX-narrow-to-environment))
	  ;(t (narrow-to-defun))))

  ;(define-key endless/toggle-map "n"
    ;#'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  ;(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  ;(add-hook 'LaTeX-mode-hook
	    ;(lambda ()
	      ;(define-key LaTeX-mode-map "\C-xn"
		;nil)))

#+END_SRC
* Environment management
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
* Appearance
** Themes
   #+BEGIN_SRC emacs-lisp
    (use-package spacemacs-theme
      :defer t
      :init (load-theme 'spacemacs-dark t))
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Prettify-symbols
   #+BEGIN_SRC emacs-lisp
     (setq prettify-symbols-unprettify-at-point 'right-edge)
     (global-prettify-symbols-mode 0)

     (add-hook
      'python-mode-hook
      (lambda ()
        (mapc (lambda (pair) (push pair prettify-symbols-alist))
              '(("def" . "𝒇")
               ("class" . "𝑪")
               ("and" . "∧")
               ("or" . "∨")
               ("not" . "￢")
               ("in" . "∈")
               ("not in" . "∉")
               ("return" . "⟼")
               ("yield" . "⟻")
               ("for" . "∀")
               ("!=" . "≠")
               ("==" . "＝")
               (">=" . "≥")
               ("<=" . "≤")
               ("[]" . "⃞")
               ("=" . "≝")))))
   #+END_SRC
** feebleline
   #+BEGIN_SRC emacs-lisp
     (use-package feebleline)
   #+END_SRC
** nyan-mode
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode)
   #+END_SRC
* Programming
** Specific interface improvements
** Parens
  #+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent)
    (add-hook 'prog-mode-hook 'electric-pair-mode)
  #+END_SRC
*** Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :diminish smartparens-mode
       :config
       (add-hook 'prog-mode-hook 'smartparens-mode))
   #+END_SRC
*** Rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :config
        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    #+END_SRC
*** Rainbow-mode?
    #+BEGIN_SRC emacs-lisp
      ;(use-package rainbow-mode
        ;:config
        ;(setq rainbow-x-colors nil)
        ;(add-hook 'prog-mode-hook 'rainbow-mode))
    #+END_SRC
** Languages
*** C / C++
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :hook (c-mode . irony-mode))

  (use-package company-irony
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package flycheck-irony
    :hook (flycheck-mode . flycheck-irony-setup))

  (use-package ggtags
    :config
    (add-hook 'c-mode-common-hook
	      (lambda ()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		  (ggtags-mode 1)))))
#+END_SRC
*** C#
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode)

  (use-package omnisharp
    :hook ((csharp-mode . omnisharp-mode)
           ;; TODO: 'before-save runs globally - make this buffer local?
           (before-save . omnisharp-code-format-entire-file))
    :config
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
*** JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    (setq-default js-indent-level 2)
    (add-hook 'prog-mode-hook 'electric-pair-mode))
    ;(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    ;(add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))

  (use-package xref-js2
    :config
    (define-key js-mode-map (kbd "M-.") nil)
    (add-hook 'js2-mode-hook (lambda ()
      (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

  (use-package js2-refactor
    :config
    (js2r-add-keybindings-with-prefix "C-c C-r")
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill))

  (use-package rjsx-mode
    :mode "\\.jsx?\\'")

  (use-package prettier-js

    :config
    (setq prettier-js-args '(
                          "--trailing-comma" "es5"
                          "--single-quote" "true"
                          "--print-width" "100"
                          ))
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'rjsx-mode-hook 'prettier-js-mode))
#+END_SRC
*** Elixir
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode)

  (use-package alchemist)
#+END_SRC
*** Solidity
#+BEGIN_SRC emacs-lisp
  (use-package solidity-mode)
  (use-package company-solidity)
  (use-package solidity-flycheck)
#+END_SRC
** Autocompletion
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode t))
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :config
    (add-hook 'after-init-hook 'global-company-mode))


  ;(use-package company-tern
    ;:config
    ;(add-to-list 'company-backends 'company-tern)
    ;(add-hook 'js2-mode-hook (lambda ()
                               ;(tern-mode)
			       ;(company-mode))))

  ;(define-key tern-mode-keymap (kbd "M-.") nil)
  ;(define-key tern-mode-keymap (kbd "M-,") nil)
#+END_SRC
*** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1))

  (use-package auto-yasnippet)

  (use-package react-snippets)
#+END_SRC
** Web
*** Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.html\\'")
    :config
    (setq web-mode-markup-indent-offset 2))

  (use-package web-beautify
    :bind (:map web-mode-map
           ("C-c b" . web-beautify-html)
           :map js2-mode-map
           ("C-c b" . web-beautify-js)))
#+END_SRC
*** Emmet Mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Project Management
*** Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
  (setq magit-completing-read-function 'ivy-completing-read)

  (use-package git-gutter
    :config
    (global-git-gutter-mode 't)
    :diminish git-gutter-mode)

  (use-package git-timemachine)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))

    (use-package counsel-projectile
      :config
      (counsel-projectile-mode))
#+END_SRC
** Server
*** Simple-httpd
#+BEGIN_SRC emacs-lisp
  ;(use-package simple-httpd)
  ;(setq httpd-root "/home/jonathan//")
  ;(httpd-start)
#+END_SRC
*** Skewer
#+BEGIN_SRC emacs-lisp
  ;(use-package skewer-mode
    ;:config (skewer-setup))

  ;(add-hook 'js2-mode-hook 'skewer-mode)
  ;(add-hook 'css-mode-hook 'skewer-css-mode)
  ;(add-hook 'web-mode-hook 'skewer-html-mode)

  ;* C-x C-e -- `skewer-eval-last-expression'
  ;* C-M-x   -- `skewer-eval-defun'
  ;* C-c C-k -- `skewer-load-buffer'
  ;* M-x RET -- `skewer-repel'
#+END_SRC
*** Impatient
#+BEGIN_SRC emacs-lisp
  ;(use-package impatient-mode)

  ;http://localhost:8080/imp/
  ;M-x impatient-mode -- to publish
#+END_SRC
